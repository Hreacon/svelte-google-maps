{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.html",
    "..\\..\\packages\\svelte-google-maps\\Map.html"
  ],
  "sourcesContent": [
    "<div class=\"max-w-md mx-auto\">\n  <h1 class=\"mb-3 mt-6\">Pulse Map</h1>\n\n  <div ref:container>\n    <Map :map defer bind:center bind:zoom>\n      <Marker :map position={{center}} title=\"Richmond, VA\" />\n      <Marker :map lat=37.540725 lng=-77.236048 label=\"A\" />\n      <Marker :map lat=37.540725 lng=-77.336048 icon=\"https://maps.google.com/mapfiles/kml/shapes/parking_lot_maps.png\" />\n      \n      <Overlay :map lat=37.540725 lng=-77.436048>Overlay Content...</Overlay>\n    </Map>\n  </div>\n\n  <p class=\"mt-4 text-center\">\n    Latitude: {{center.lat.toFixed(6)}} &mdash;\n    Longitude: {{center.lng.toFixed(6)}} &mdash;\n    <label for=\"zoom\">Zoom</label>: <input type=\"range\" min=\"1\" max=\"12\" bind:value=\"zoom\" class=\"align-text-top\" /> {{zoom}}\n  </p>\n</div>\n\n<style>\n  ref:container {\n    height: 400px;\n    border: solid 1px #ccc;\n  }\n</style>\n\n<script>\n  import { Context } from 'svelte-google-maps';\n  import Map from 'svelte-google-maps/Map.html';\n  import Marker from 'svelte-google-maps/Marker.html';\n  import Overlay from 'svelte-google-maps/Overlay.html';\n\n  const API_KEY = \"AIzaSyD7oUvzDD-eXoWc91eECCa0eMHmHVZb1Cg\";\n  const RICHMOND = { lat: 37.540725, lng: -77.436048 };\n\n  export default {\n    components: { Map, Marker, Overlay },\n    \n    data() {\n      return {\n        map: new Context(API_KEY, { beta: true }),\n        center: RICHMOND,\n        zoom: 11,\n      };\n    }\n  }\n</script>\n",
    "<div ref:map on:intersection=\"load()\"></div>\n<div ref:children><slot /></div>\n\n<style>\n  ref:map {\n    width: 100%;\n    height: 100%;\n  }\n\n  ref:children {\n    visibility: hidden;\n  }\n</style>\n\n<script>\n  import { intersection } from './src/events';\n  import { changer } from './src/utils';\n\n  export default {\n    data() {\n      return {\n        defer: false,\n        center: { lat: 0, lng: 0 },\n        zoom: 8,\n        instance: null,\n        loading: null,\n        loaded: false\n      };\n    },\n\n    events: { intersection },\n\n    oncreate() {\n      // Load map immediately or wait until interaction for defer\n      const defer = this.get('defer');\n      if (!defer || defer === 'false') this.load();\n    },\n\n    async ondestroy() {\n      let { instance, loading } = this.get('instance');\n      \n      if (!instance && loading) instance = await loading;\n      if (!instance) return;\n\n      // TODO Remove listeners from instance\n      console.log('destroy', instance);\n    },\n\n    methods: {\n      async load() {\n        let { instance, map, center, zoom, loaded, loading } = this.get();\n\n        if (loaded) return instance;\n        if (loading) return loading;\n\n        loading = map.load(this.refs.map, { center, zoom });\n        this.set({ loaded: false, loading });\n\n        instance = await loading;\n\n        // Setup two-way binding between component and map\n        // - Use `changer` to avoid additional sets/changes for internal changes\n        const change = changer();\n\n        // Attach listeners to instance\n        instance.addListener('zoom_changed', () => {\n          change(() => {\n            const zoom = instance.getZoom();\n            this.set({ zoom })\n          });\n        });\n\n        instance.addListener('center_changed', () => {          \n          change(() => {\n            const center = instance.getCenter();\n            const lat = center.lat();\n            const lng = center.lng();\n\n            this.set({ center: { lat, lng } })\n          });\n        });\n\n        // Attach observers to component\n        this.observe('center', center => {\n          change(() => instance.setCenter(center));\n        }, { init: false });\n\n        this.observe('zoom', zoom => {\n          change(() => instance.setZoom(zoom));\n        }, { init: false });\n\n        this.set({ instance, loaded: true, loading: null });\n\n        return instance;\n      }\n    },\n  }\n</script>\n"
  ],
  "names": [],
  "mappings": "AAqBE,yCAAc,CAAC,AACb,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,IAAI,AACxB,CAAC;ACpBD,kCAAQ,CAAC,AACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AAED,uCAAa,CAAC,AACZ,UAAU,CAAE,MAAM,AACpB,CAAC"
}